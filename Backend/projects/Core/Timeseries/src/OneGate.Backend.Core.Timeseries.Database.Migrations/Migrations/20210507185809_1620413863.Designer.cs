// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OneGate.Backend.Core.Timeseries.Database;

namespace OneGate.Backend.Core.Timeseries.Database.Migrations.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210507185809_1620413863")]
    partial class _1620413863
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("OneGate.Backend.Core.Timeseries.Database.Models.Artifact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update");

                    b.Property<int>("LayerId")
                        .HasColumnType("integer")
                        .HasColumnName("layer_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Type", "LayerId", "Timestamp")
                        .IsUnique();

                    b.ToTable("artifact");

                    b.HasDiscriminator<string>("Type").HasValue("Artifact");
                });

            modelBuilder.Entity("OneGate.Backend.Core.Timeseries.Database.Models.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("interval");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId", "AssetId", "Interval")
                        .IsUnique();

                    b.ToTable("layer");
                });

            modelBuilder.Entity("OneGate.Backend.Core.Timeseries.Database.Models.Ohlc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    b.Property<double>("Close")
                        .HasColumnType("double precision")
                        .HasColumnName("close");

                    b.Property<double>("High")
                        .HasColumnType("double precision")
                        .HasColumnName("high");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("interval");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update");

                    b.Property<double>("Low")
                        .HasColumnType("double precision")
                        .HasColumnName("low");

                    b.Property<double>("Open")
                        .HasColumnType("double precision")
                        .HasColumnName("open");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision")
                        .HasColumnName("volume");

                    b.HasKey("Id");

                    b.HasIndex("AssetId", "Interval", "Timestamp")
                        .IsUnique();

                    b.ToTable("ohlc");
                });

            modelBuilder.Entity("OneGate.Backend.Core.Timeseries.Database.Models.AdviceArtifact", b =>
                {
                    b.HasBaseType("OneGate.Backend.Core.Timeseries.Database.Models.Artifact");

                    b.Property<float>("BuyProbability")
                        .HasColumnType("real")
                        .HasColumnName("buy_probability");

                    b.Property<float>("HoldProbability")
                        .HasColumnType("real")
                        .HasColumnName("hold_probability");

                    b.Property<float>("SellProbability")
                        .HasColumnType("real")
                        .HasColumnName("sell_probability");

                    b.ToTable("artifact");

                    b.HasDiscriminator().HasValue("ADVICE");
                });

            modelBuilder.Entity("OneGate.Backend.Core.Timeseries.Database.Models.PointArtifact", b =>
                {
                    b.HasBaseType("OneGate.Backend.Core.Timeseries.Database.Models.Artifact");

                    b.Property<float>("Value")
                        .HasColumnType("real")
                        .HasColumnName("value");

                    b.ToTable("artifact");

                    b.HasDiscriminator().HasValue("POINT");
                });
#pragma warning restore 612, 618
        }
    }
}
